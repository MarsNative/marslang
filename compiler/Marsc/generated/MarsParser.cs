//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Mars.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class MarsParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WS=1, BLOCK_COMMENT=2, LINE_COMMENT=3, KW_PACKAGE=4, IDENTIFIER=5, INTEGER=6, 
		ADD=7, SUB=8, MULT=9, DIV=10, OPERATOR=11;
	public const int
		RULE_compilation_unit = 0, RULE_package_decl = 1, RULE_expression = 2, 
		RULE_reference = 3, RULE_literal = 4, RULE_binary_op = 5;
	public static readonly string[] ruleNames = {
		"compilation_unit", "package_decl", "expression", "reference", "literal", 
		"binary_op"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'package'", null, null, "'+'", "'-'", "'*'", 
		"'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "BLOCK_COMMENT", "LINE_COMMENT", "KW_PACKAGE", "IDENTIFIER", 
		"INTEGER", "ADD", "SUB", "MULT", "DIV", "OPERATOR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Mars.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MarsParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MarsParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MarsParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class Compilation_unitContext : ParserRuleContext {
		public Package_declContext package_decl() {
			return GetRuleContext<Package_declContext>(0);
		}
		public Compilation_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilation_unit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarsListener typedListener = listener as IMarsListener;
			if (typedListener != null) typedListener.EnterCompilation_unit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarsListener typedListener = listener as IMarsListener;
			if (typedListener != null) typedListener.ExitCompilation_unit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarsVisitor<TResult> typedVisitor = visitor as IMarsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilation_unit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compilation_unitContext compilation_unit() {
		Compilation_unitContext _localctx = new Compilation_unitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilation_unit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12; package_decl();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Package_declContext : ParserRuleContext {
		public ITerminalNode KW_PACKAGE() { return GetToken(MarsParser.KW_PACKAGE, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(MarsParser.IDENTIFIER, 0); }
		public Package_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_package_decl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarsListener typedListener = listener as IMarsListener;
			if (typedListener != null) typedListener.EnterPackage_decl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarsListener typedListener = listener as IMarsListener;
			if (typedListener != null) typedListener.ExitPackage_decl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarsVisitor<TResult> typedVisitor = visitor as IMarsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackage_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Package_declContext package_decl() {
		Package_declContext _localctx = new Package_declContext(Context, State);
		EnterRule(_localctx, 2, RULE_package_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14; Match(KW_PACKAGE);
			State = 15; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarsListener typedListener = listener as IMarsListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarsListener typedListener = listener as IMarsListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarsVisitor<TResult> typedVisitor = visitor as IMarsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 4, RULE_expression);
		try {
			State = 19;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 17; reference();
				}
				break;
			case INTEGER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 18; literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(MarsParser.IDENTIFIER, 0); }
		public ReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarsListener typedListener = listener as IMarsListener;
			if (typedListener != null) typedListener.EnterReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarsListener typedListener = listener as IMarsListener;
			if (typedListener != null) typedListener.ExitReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarsVisitor<TResult> typedVisitor = visitor as IMarsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceContext reference() {
		ReferenceContext _localctx = new ReferenceContext(Context, State);
		EnterRule(_localctx, 6, RULE_reference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 21; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode INTEGER() { return GetToken(MarsParser.INTEGER, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarsListener typedListener = listener as IMarsListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarsListener typedListener = listener as IMarsListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarsVisitor<TResult> typedVisitor = visitor as IMarsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 8, RULE_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 23; Match(INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Binary_opContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode OPERATOR() { return GetToken(MarsParser.OPERATOR, 0); }
		public Binary_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarsListener typedListener = listener as IMarsListener;
			if (typedListener != null) typedListener.EnterBinary_op(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarsListener typedListener = listener as IMarsListener;
			if (typedListener != null) typedListener.ExitBinary_op(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarsVisitor<TResult> typedVisitor = visitor as IMarsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Binary_opContext binary_op() {
		Binary_opContext _localctx = new Binary_opContext(Context, State);
		EnterRule(_localctx, 10, RULE_binary_op);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 25; expression();
			State = 26; Match(OPERATOR);
			State = 27; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\r', ' ', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', 
		'\t', '\x6', '\x4', '\a', '\t', '\a', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x5', 
		'\x4', '\x16', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x2', '\x2', '\b', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\x2', 
		'\x2', '\x2', '\x1A', '\x2', '\xE', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'\x10', '\x3', '\x2', '\x2', '\x2', '\x6', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\b', '\x17', '\x3', '\x2', '\x2', '\x2', '\n', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\f', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'\xF', '\x5', '\x4', '\x3', '\x2', '\xF', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\x10', '\x11', '\a', '\x6', '\x2', '\x2', '\x11', '\x12', '\a', 
		'\a', '\x2', '\x2', '\x12', '\x5', '\x3', '\x2', '\x2', '\x2', '\x13', 
		'\x16', '\x5', '\b', '\x5', '\x2', '\x14', '\x16', '\x5', '\n', '\x6', 
		'\x2', '\x15', '\x13', '\x3', '\x2', '\x2', '\x2', '\x15', '\x14', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\a', '\x3', '\x2', '\x2', '\x2', '\x17', 
		'\x18', '\a', '\a', '\x2', '\x2', '\x18', '\t', '\x3', '\x2', '\x2', '\x2', 
		'\x19', '\x1A', '\a', '\b', '\x2', '\x2', '\x1A', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\x1B', '\x1C', '\x5', '\x6', '\x4', '\x2', '\x1C', '\x1D', 
		'\a', '\r', '\x2', '\x2', '\x1D', '\x1E', '\x5', '\x6', '\x4', '\x2', 
		'\x1E', '\r', '\x3', '\x2', '\x2', '\x2', '\x3', '\x15',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
